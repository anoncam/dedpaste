name: Test Release Workflow

on:
  push:
    branches:
      - update-release-pipeline
    paths:
      - 'package.json'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version_changed: true
      new_version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
      
      - name: Get version from package.json
        id: check
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version in package.json: $VERSION"
  
  generate-sbom:
    needs: check-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      sbom_path: ${{ steps.generate-sbom.outputs.sbom_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Generate SBOM with CycloneDX
        id: generate-sbom
        run: |
          # Install CycloneDX tool for npm
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Generate SBOM
          cyclonedx-npm --output-format json --output-file sbom.json
          echo "sbom_path=sbom.json" >> $GITHUB_OUTPUT
          
          # Log SBOM generation
          echo "Generated SBOM for dedpaste v${{ needs.check-version.outputs.new_version }}"

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom-test-v${{ needs.check-version.outputs.new_version }}
          path: sbom.json
          retention-days: 5

  generate-release-notes:
    needs: check-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      release_notes: ${{ steps.generate-notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: generate-notes
        run: |
          # Set GH_TOKEN for gh CLI
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Find the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, use the first commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
            CHANGES=$(git log --pretty=format:"- %s [%h] (%an)" $PREV_COMMIT..HEAD)
          else
            # Otherwise use the previous tag
            CHANGES=$(git log --pretty=format:"- %s [%h] (%an)" $PREV_TAG..HEAD)
          fi
          
          # Get merged PRs since last release
          MERGED_PRS=$(gh pr list --state merged --base main --json number,title,labels,mergedAt,author --limit 100 | jq -r '.[] | select(.mergedAt != null) | "- #\(.number) \(.title) (@\(.author.login))\n  Labels: \(.labels | map(.name) | join(", "))"' || echo "Could not fetch PRs")

          # Create release notes with sections
          RELEASE_NOTES=$(cat <<EOF
## What's New in v${{ needs.check-version.outputs.new_version }} (TEST)

### Changes
$CHANGES

### Merged Pull Requests
$MERGED_PRS

### Documentation
- Full documentation available at: https://github.com/anoncam/dedpaste#readme
- See [CONTRIBUTING.md](https://github.com/anoncam/dedpaste/blob/main/CONTRIBUTING.md) for contribution guidelines
EOF
          )
          
          # Save to file for later use
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-test-v${{ needs.check-version.outputs.new_version }}
          path: release_notes.md
          retention-days: 5

  build-and-test:
    needs: [check-version, generate-sbom, generate-release-notes]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
          
      - name: Build
        run: npm run build
        
      - name: Run tests
        run: |
          npm test || (
            NODE_OPTIONS="--experimental-vm-modules" ./node_modules/.bin/mocha "test/**/*.test.js"
          )
          
      # Download SBOM and release notes artifacts
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom-test-v${{ needs.check-version.outputs.new_version }}
          
      - name: Download Release Notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes-test-v${{ needs.check-version.outputs.new_version }}
          
      - name: Verify artifacts
        run: |
          echo "✅ Build successful"
          echo "✅ Tests passed"
          echo "✅ SBOM generated"
          echo "✅ Release notes generated"
          
          echo "SBOM contents (first 10 lines):"
          head -n 10 sbom.json
          
          echo "Release notes contents:"
          cat release_notes.md