# DEPRECATED: Please use release-with-sbom.yml instead
# This workflow is kept for reference but should not be triggered automatically

name: Legacy Release to NPM (DEPRECATED)

on:
  # Manual trigger only - this workflow is deprecated
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty to use current version in package.json)'
        required: false

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Check for version bump in package.json
        id: check
        run: |
          echo "GitHub event: ${{ github.event_name }}"
          echo "Checking package.json for version changes..."
          
          # Get current version from package.json
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "Current version in package.json: $NEW_VERSION"
          
          if [ "${{ github.event_name }}" = "push" ]; then
            # For direct pushes, compare with previous commit
            echo "This is a push event - comparing with previous commit"
            git diff HEAD^ HEAD --name-only 
            
            if git diff HEAD^ HEAD --name-only | grep -q "package.json"; then
              echo "package.json was changed in this commit"
            else
              echo "package.json was not changed in this commit - exiting check"
              exit 0
            fi
            
            OLD_VERSION=$(git show HEAD^:package.json | jq -r '.version')
            echo "Previous version from HEAD^: $OLD_VERSION"
            
            # Compare versions for push events
            if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
              echo "Version changed from $OLD_VERSION to $NEW_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged ($OLD_VERSION == $NEW_VERSION)"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            # For workflow_run events triggered by Auto Version Bump, assume there was a version change
            echo "This is a workflow_run event triggered by 'Auto Version Bump'"
            echo "Workflow run id: ${{ github.event.workflow_run.id }}"
            echo "Workflow run name: ${{ github.event.workflow_run.name }}"
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
            
            # List recent commits to debug
            echo "Recent commits:"
            git log -n 3 --pretty=format:"%H %s"
            
            # Always set version_changed to true when triggered by Auto Version Bump workflow
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Version will be published: $NEW_VERSION"
          
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manually triggered workflow
            echo "This is a workflow_dispatch event"
            
            # Check if a version was specified in the input
            if [ -n "${{ github.event.inputs.version }}" ]; then
              INPUT_VERSION="${{ github.event.inputs.version }}"
              echo "Version from workflow input: $INPUT_VERSION"
              
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$INPUT_VERSION" >> $GITHUB_OUTPUT
              echo "Version will be published: $INPUT_VERSION"
            else
              # Use the version from package.json
              echo "No version specified in input, using version from package.json"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "Version will be published: $NEW_VERSION"
            fi
          
          else
            # Fallback for any other event types
            echo "Event type: ${{ github.event_name }}"
            echo "Using version from package.json"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Version will be published: $NEW_VERSION"
          fi

  generate-sbom:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      sbom_path: ${{ steps.generate-sbom.outputs.sbom_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Generate SBOM with CycloneDX
        id: generate-sbom
        run: |
          # Install CycloneDX tool for npm
          npm install -g @cyclonedx/cyclonedx-npm
          
          # Generate SBOM
          cyclonedx-npm --output-format json --output-file sbom.json
          echo "sbom_path=sbom.json" >> $GITHUB_OUTPUT
          
          # Log SBOM generation
          echo "Generated SBOM for dedpaste v${{ needs.check-version.outputs.new_version }}"

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom-v${{ needs.check-version.outputs.new_version }}
          path: sbom.json
          retention-days: 90

  generate-release-notes:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      release_notes: ${{ steps.generate-notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Generate Release Notes
        id: generate-notes
        run: |
          # Find the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # If there's no previous tag, use the first commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
            CHANGES=$(git log --pretty=format:"- %s [%h] (%an)" $PREV_COMMIT..HEAD)
          else
            # Otherwise use the previous tag
            CHANGES=$(git log --pretty=format:"- %s [%h] (%an)" $PREV_TAG..HEAD)
          fi
          
          # Get merged PRs since last release
          # Set GH_TOKEN for gh CLI
          export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          MERGED_PRS=$(gh pr list --state merged --base main --json number,title,labels,mergedAt,author --limit 100 | jq -r '.[] | select(.mergedAt != null) | "- #\(.number) \(.title) (@\(.author.login))\n  Labels: \(.labels | map(.name) | join(", "))"')

          # Create release notes with sections
          RELEASE_NOTES=$(cat <<EOF
## What's New in v${{ needs.check-version.outputs.new_version }}

### Changes
$CHANGES

### Merged Pull Requests
$MERGED_PRS

### Documentation
- Full documentation available at: https://github.com/anoncam/dedpaste#readme
- See [CONTRIBUTING.md](https://github.com/anoncam/dedpaste/blob/main/CONTRIBUTING.md) for contribution guidelines
EOF
          )
          
          # Escape newlines and quotes for GitHub Actions output
          RELEASE_NOTES_ESCAPED="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES_ESCAPED="${RELEASE_NOTES_ESCAPED//$'\n'/'%0A'}"
          RELEASE_NOTES_ESCAPED="${RELEASE_NOTES_ESCAPED//$'\r'/'%0D'}"
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save to file for later use
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Upload release notes as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-notes-v${{ needs.check-version.outputs.new_version }}
          path: release_notes.md
          retention-days: 90

  build-and-release:
    needs: [check-version, generate-sbom, generate-release-notes]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Debug build-and-release job
        run: |
          echo "========== DEBUG INFO =========="
          echo "Version changed: ${{ needs.check-version.outputs.version_changed }}"
          echo "New version: ${{ needs.check-version.outputs.new_version }}"
          echo "Event name: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Workflow run event details:"
            echo "  - Workflow name: ${{ github.event.workflow_run.name }}"
            echo "  - Workflow ID: ${{ github.event.workflow_run.id }}"
            echo "  - Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "  - HEAD SHA: ${{ github.event.workflow_run.head_sha }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "Repository dispatch event details:"
            echo "  - Event type: ${{ github.event.action }}"
            echo "  - Version: ${{ github.event.client_payload.version }}"
          fi
          echo "================================"
        
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 10
          ref: ${{ github.event_name == 'workflow_run' && 'main' || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install
          
      - name: Debug npm environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Listing node_modules:"
          ls -la node_modules/.bin/
          echo "Mocha package:"
          npm list mocha

      - name: Build
        run: npm run build

      - name: Run tests
        run: |
          # First try using our updated test command from package.json
          npm test || (
            # If that fails, try with explicit path to mocha
            NODE_OPTIONS="--experimental-vm-modules" ./node_modules/.bin/mocha "test/**/*.test.js"
          )

      # Download SBOM and release notes artifacts
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom-v${{ needs.check-version.outputs.new_version }}
          
      - name: Download Release Notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes-v${{ needs.check-version.outputs.new_version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          
      - name: Upload SBOM to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sbom.json
          asset_name: dedpaste-v${{ needs.check-version.outputs.new_version }}-sbom.json
          asset_content_type: application/json

      - name: Setup NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami || echo "Authentication failed, but continuing..."

      - name: Attach SBOM to NPM package
        run: |
          # Include SBOM in the package for npm publish
          cp sbom.json ./dedpaste-sbom.json
          # Update package.json to include SBOM metadata
          node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.sbom = 'dedpaste-sbom.json'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"

      # Using Provenance for npm supply chain security
      # https://docs.npmjs.com/generating-provenance-statements
      - name: Publish to NPM with Provenance
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}