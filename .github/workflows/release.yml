name: Release to NPM

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check for version bump in package.json
        id: check
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For direct pushes, compare with previous commit
            git diff HEAD^ HEAD --name-only | grep -q "package.json" || exit 0
            OLD_VERSION=$(git show HEAD^:package.json | jq -r '.version')
            NEW_VERSION=$(jq -r '.version' package.json)
          else
            # For merged PRs, compare with base branch
            OLD_VERSION=$(git show origin/${{ github.base_ref }}:package.json | jq -r '.version')
            NEW_VERSION=$(jq -r '.version' package.json)
          fi
          
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "Version changed from $OLD_VERSION to $NEW_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new_version }}
          release_name: Release v${{ needs.check-version.outputs.new_version }}
          body: |
            Release version ${{ needs.check-version.outputs.new_version }}
            
            This is an automated release created when the package.json version was updated.
          draft: false
          prerelease: false

      - name: Setup NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami || echo "Authentication failed, but continuing..."

      # Using Provenance for npm supply chain security
      # https://docs.npmjs.com/generating-provenance-statements
      - name: Publish to NPM with Provenance
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}