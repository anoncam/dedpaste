name: Auto Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Check PR label for version bump type
        id: check-label
        run: |
          PR_LABELS="${{ toJson(github.event.pull_request.labels.*.name) }}"
          
          # Determine conventional commit type from PR title or commits
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Function to determine bump type from conventional commits
          determine_bump_type() {
            local commits=$1
            local has_breaking=false
            local has_feat=false
            local has_fix=false
            
            while IFS= read -r commit_msg; do
              if [[ "$commit_msg" =~ ^BREAKING\ CHANGE: || "$commit_msg" =~ ^[a-z]+(\([a-z]+\))?!: ]]; then
                has_breaking=true
              elif [[ "$commit_msg" =~ ^feat(\([a-z]+\))?: ]]; then
                has_feat=true
              elif [[ "$commit_msg" =~ ^fix(\([a-z]+\))?: ]]; then
                has_fix=true
              fi
            done <<< "$commits"
            
            if [[ "$has_breaking" == "true" ]]; then
              echo "major"
            elif [[ "$has_feat" == "true" ]]; then
              echo "minor"
            elif [[ "$has_fix" == "true" ]]; then
              echo "patch"
            else
              echo "patch"  # Default
            fi
          }
          
          # Check PR title for conventional commit format
          AUTO_BUMP_TYPE=""
          if [[ "$PR_TITLE" =~ ^BREAKING\ CHANGE: || "$PR_TITLE" =~ ^[a-z]+(\([a-z]+\))?!: ]]; then
            AUTO_BUMP_TYPE="major"
          elif [[ "$PR_TITLE" =~ ^feat(\([a-z]+\))?: ]]; then
            AUTO_BUMP_TYPE="minor"
          elif [[ "$PR_TITLE" =~ ^fix(\([a-z]+\))?: ]]; then
            AUTO_BUMP_TYPE="patch"
          else
            # Check PR commits for conventional commit format
            echo "PR title not in conventional commit format, checking commits..."
            # Set GH_TOKEN for gh CLI
            export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            PR_COMMITS=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[].messageHeadline')
            AUTO_BUMP_TYPE=$(determine_bump_type "$PR_COMMITS")
          fi
          
          echo "Auto-detected bump type from commits/title: $AUTO_BUMP_TYPE"
          
          # Explicit labels take precedence over auto-detection
          if echo "$PR_LABELS" | grep -q '"major"'; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Explicit 'major' label found, using it"
          elif echo "$PR_LABELS" | grep -q '"minor"'; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Explicit 'minor' label found, using it"
          elif echo "$PR_LABELS" | grep -q '"patch"'; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Explicit 'patch' label found, using it"
          elif [ -n "$AUTO_BUMP_TYPE" ]; then
            echo "bump_type=$AUTO_BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Using auto-detected bump type: $AUTO_BUMP_TYPE"
          else
            # Default to patch if no specific indication found
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "No version indicators found, defaulting to patch"
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install -g semver
      
      - name: Bump version
        id: bump-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Determine new version based on bump type
          if [ "${{ steps.check-label.outputs.bump_type }}" = "major" ]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [ "${{ steps.check-label.outputs.bump_type }}" = "minor" ]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          else
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "Bump type: ${{ steps.check-label.outputs.bump_type }}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json with new version
          node -e "const fs = require('fs'); const pkg = require('./package.json'); pkg.version = '$NEW_VERSION'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');"
      
      - name: Commit and push version bump
        run: |
          git add package.json
          git commit -m "Bump version to ${{ steps.bump-version.outputs.new_version }}

          Version bump type: ${{ steps.check-label.outputs.bump_type }}
          PR: #${{ github.event.pull_request.number }}
          Title: ${{ github.event.pull_request.title }}"
          git push
      
      - name: Output summary
        run: |
          echo "âœ… Version bumped to ${{ steps.bump-version.outputs.new_version }} (${{ steps.check-label.outputs.bump_type }} bump)"
          echo "ðŸš€ The release-with-sbom workflow will be triggered automatically by this change."
      
      # Explicitly trigger the release workflow with the new version
      - name: Trigger release workflow
        run: |
          # Allow a moment for push to complete
          sleep 5
          
          # Trigger the release workflow with the new version
          echo "Directly triggering release-with-sbom workflow..."
          gh workflow run release-with-sbom.yml -f force_version=${{ steps.bump-version.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}